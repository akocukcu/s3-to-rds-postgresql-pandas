# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the main branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  # run manually
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1                                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: s3-to-rds-postgresql-pandas                # set this to your Amazon ECR repository name
  ECS_TASK_DEFINITION_FAMILY: s3-to-rds-postgresql-pandas-td # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: s3-to-rds-postgresql-pandas                # set this to the name of the container in the
                                                             # containerDefinitions section of your task definition

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Download task definition
      id: download-task-definition
      run: |
        aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_FAMILY \
        --query '{ containerDefinitions: taskDefinition.containerDefinitions, 
                   family: taskDefinition.family,
                   taskRoleArn: taskDefinition.taskRoleArn,
                   executionRoleArn: taskDefinition.executionRoleArn,
                   networkMode: taskDefinition.networkMode,
                   volumes: taskDefinition.volumes,
                   placementConstraints: taskDefinition.placementConstraints,
                   requiresCompatibilities: taskDefinition.requiresCompatibilities,
                   cpu: taskDefinition.cpu,
                   memory: taskDefinition.memory}' > aws-ecs-task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: aws-ecs-task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Register task definition
      id: register-task-definition
      run: |
        aws ecs register-task-definition --family $ECS_TASK_DEFINITION_FAMILY --cli-input-json file://${{ steps.task-def.outputs.task-definition }}
